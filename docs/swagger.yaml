basePath: /api/v1
definitions:
  models.AddPhase:
    properties:
      name:
        example: Phase name
        type: string
    type: object
  models.AddUser:
    properties:
      email:
        example: example_user@example.com
        type: string
      password:
        example: password
        type: string
      password_confirmation:
        example: password
        type: string
    type: object
  models.AuthenticateUser:
    properties:
      email:
        example: example_user@example.com
        type: string
      password:
        example: password
        type: string
    type: object
  models.Phase:
    properties:
      bio:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.UpdatePhase:
    properties:
      name:
        example: Phase name
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      password_confirmation:
        type: string
      password_hash:
        type: string
      updated_at:
        type: string
    type: object
  web.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  web.SuccessObj:
    properties:
      message:
        example: Welcome
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: M&M Simulation's API
  version: "1.0"
paths:
  /phases:
    get:
      consumes:
      - application/json
      description: get all phases
      parameters:
      - description: name search by q
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Token:
              description: qwerty
              type: string
          schema:
            items:
              $ref: '#/definitions/models.Phase'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
      summary: List phases
    post:
      consumes:
      - application/json
      description: add by json Phase
      parameters:
      - description: Add Phase
        in: body
        name: Phase
        required: true
        schema:
          $ref: '#/definitions/models.AddPhase'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Phase'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
      summary: Add a Phase
      tags:
      - phases
  /phases/{id}:
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: Phase ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Phase'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
      summary: Show a phase
      tags:
      - phases
    put:
      consumes:
      - application/json
      description: Update by json phase
      parameters:
      - description: Phase ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update phase
        in: body
        name: phase
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePhase'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Phase'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
      summary: Update a phase
      tags:
      - phases
  /signin:
    post:
      consumes:
      - application/json
      description: add by json User
      parameters:
      - description: Add User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.AuthenticateUser'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
      summary: Add a User
      tags:
      - users
  /users:
    post:
      consumes:
      - application/json
      description: add by json User
      parameters:
      - description: Add User
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/models.AddUser'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.HTTPError'
            type: object
      summary: Add a User
      tags:
      - users
  /users/new:
    get:
      consumes:
      - application/json
      description: Create user form
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.SuccessObj'
            type: object
      summary: Create user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
